{# Hérite du template de base de l'administration #}
{% extends 'admin/base_admin.html.twig' %}

{# Titre de la page #}
{% block title %}Gestion des utilisateurs{% endblock %}

{# Titre affiché sur la page #}
{% block page_title %}Gestion des utilisateurs{% endblock %}
{# Fil d'Ariane (breadcrumb) #}
{% block breadcrumb %}Utilisateurs{% endblock %}

{# Bloc pour les feuilles de style spécifiques à cette page #}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('assets/css/adminlte-custom.css') }}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .user-actions .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }
        
        .btn-outline-primary, .btn-outline-secondary {
            border-width: 1px;
            font-weight: 500;
            box-shadow: none;
            transition: all 0.2s ease;
        }
        
        .btn-outline-primary:hover, .btn-outline-secondary:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .rounded-pill {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        

        
        .stats-box {
            border: 1px solid #dee2e6;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .type-stat {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .type-stat:last-child {
            border-bottom: none;
        }
        
        .type-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .type-freelance {
            background-color: #e3f2fd;
            color: #0d6efd;
        }
        
        .type-formateur {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        
        .type-employeur {
            background-color: #fff3e0;
            color: #ed6c02;
        }
    </style>
{% endblock %}

{# Bloc pour les scripts JavaScript spécifiques à cette page #}
{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    // Fonction de recherche dynamique, de tri et de statistiques
    document.addEventListener('DOMContentLoaded', function() {
        // Gérer l'affichage des statistiques lors du clic sur le bouton
        const showStatsBtn = document.getElementById('showStatsBtn');
        const statsSection = document.getElementById('statsSection');
        
        let chartInstance = null;
        let statsGenerated = false;
        
        if (showStatsBtn && statsSection) {
            showStatsBtn.addEventListener('click', function() {
                // Basculer l'affichage de la section des statistiques
                if (statsSection.style.display === 'none') {
                    statsSection.style.display = 'block';
                    showStatsBtn.innerHTML = '<i class="bi bi-x-lg me-1"></i>Fermer';
                    showStatsBtn.classList.remove('btn-outline-primary');
                    showStatsBtn.classList.add('btn-outline-secondary');
                    
                    // Générer les statistiques uniquement si elles n'ont pas encore été générées
                    if (!statsGenerated) {
                        generateStats();
                        statsGenerated = true;
                    }
                } else {
                    statsSection.style.display = 'none';
                    showStatsBtn.innerHTML = '<i class="bi bi-bar-chart-fill me-1"></i>Stats';
                    showStatsBtn.classList.remove('btn-outline-secondary');
                    showStatsBtn.classList.add('btn-outline-primary');
                }
            });
        }
        
        // Fonction pour générer les statistiques
        function generateStats() {
            // Préparation des données pour les statistiques par type
            const userRows = document.querySelectorAll('tbody tr');
            const userTypes = {};
            let totalUsers = 0;
            
            userRows.forEach(row => {
                const typeCell = row.querySelector('td:nth-child(5)');
                if (typeCell) {
                    const type = typeCell.textContent.trim().toLowerCase();
                    if (!userTypes[type]) {
                        userTypes[type] = 0;
                    }
                    userTypes[type]++;
                    totalUsers++;
                }
            });
            
            // Création du graphique
            if (document.getElementById('userTypeChart')) {
                const ctx = document.getElementById('userTypeChart').getContext('2d');
                
                // Préparation des données pour Chart.js
                const typeLabels = Object.keys(userTypes).map(type => type.charAt(0).toUpperCase() + type.slice(1));
                const typeCounts = Object.values(userTypes);
                const backgroundColors = [
                    'rgba(13, 110, 253, 0.7)',  // Bleu pour freelance
                    'rgba(46, 125, 50, 0.7)',   // Vert pour formateur
                    'rgba(237, 108, 2, 0.7)'    // Orange pour employeur
                ];
                
                // Détruire le graphique existant s'il y en a un
                if (chartInstance) {
                    chartInstance.destroy();
                }
                
                // Créer un nouveau graphique
                chartInstance = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: typeLabels,
                        datasets: [{
                            data: typeCounts,
                            backgroundColor: backgroundColors,
                            borderColor: '#ffffff',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const percentage = Math.round((value / totalUsers) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Affichage des statistiques textuelles
            const statsContainer = document.getElementById('userTypeStats');
            if (statsContainer) {
                let statsHTML = '';
                
                Object.entries(userTypes).forEach(([type, count]) => {
                    const percentage = Math.round((count / totalUsers) * 100);
                    const typeClass = `type-${type}`;
                    
                    statsHTML += `
                    <div class="type-stat">
                        <div>
                            <span class="type-badge ${typeClass}">${type.charAt(0).toUpperCase() + type.slice(1)}</span>
                        </div>
                        <div>
                            <strong>${count}</strong> utilisateurs <small>(${percentage}%)</small>
                        </div>
                    </div>`;
                });
                
                statsHTML += `
                <div class="type-stat mt-2">
                    <div><strong>Total</strong></div>
                    <div><strong>${totalUsers}</strong> utilisateurs</div>
                </div>`;
                
                statsContainer.innerHTML = statsHTML;
            }
        }
        const searchInput = document.getElementById('searchInput');
        const sortOldestFirst = document.getElementById('sortOldestFirst');
        const sortNewestFirst = document.getElementById('sortNewestFirst');
        const userTable = document.querySelector('table.table');
        const tbody = userTable ? userTable.querySelector('tbody') : null;
        
        // Fonction pour trier les lignes du tableau
        function sortTableRows(ascending = true) {
            if (!tbody) return;
            
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // Trier les lignes par date d'inscription
            rows.sort((a, b) => {
                const dateA = parseInt(a.getAttribute('data-date-inscription') || '0');
                const dateB = parseInt(b.getAttribute('data-date-inscription') || '0');
                
                return ascending ? dateA - dateB : dateB - dateA;
            });
            
            // Réorganiser les lignes dans le DOM
            rows.forEach(row => {
                tbody.appendChild(row);
            });
        }
        
        // Recherche par nom ou prénom
        if (searchInput) {
            searchInput.addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const userRows = document.querySelectorAll('tbody tr');
                
                userRows.forEach(row => {
                    const nameCell = row.querySelector('td:nth-child(1)');
                    const name = nameCell ? nameCell.textContent.toLowerCase() : '';
                    
                    if (name.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }
        
        // Tri par date d'inscription via le select
        const sortSelect = document.getElementById('sortSelect');
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                const value = this.value;
                
                if (value === 'oldest') {
                    sortTableRows(true); // Tri ascendant (plus anciens d'abord)
                } else if (value === 'newest') {
                    sortTableRows(false); // Tri descendant (plus récents d'abord)
                }
                // Si 'none' est sélectionné, on ne fait rien (pas de tri)
            });
        }
    });
    
    // Fonction JavaScript pour la mise à jour d'un utilisateur via AJAX
    async function updateUser(event, userId) {
        try {
            const form = document.getElementById(`editUserForm${userId}`);
            if (!form) {
                throw new Error('Formulaire non trouvé');
            }

            // Supprimer les anciennes alertes
            form.querySelectorAll('.alert').forEach(alert => alert.remove());
            document.querySelectorAll('.alert-ajax').forEach(alert => alert.remove());

            // Désactiver le bouton de soumission
            const submitButton = form.querySelector('button.btn-primary');
            if (!submitButton) {
                throw new Error('Bouton de soumission non trouvé');
            }

            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enregistrement...';

            // Préparer les données
            const formData = new FormData();
            const fields = {
                '_token': 'input[name="_token"]',
                'nom': 'input[name="nom"]',
                'prenom': 'input[name="prenom"]',
                'email': 'input[name="email"]',
                'password': 'input[name="password"]',
                'type_utilisateur': 'select[name="type_utilisateur"]',
                'telephone': 'input[name="telephone"]'
            };
            
            // Ajouter les conditions d'utilisation automatiquement
            formData.append('conditions', 'on');

            // Vérifier et ajouter chaque champ
            for (const [key, selector] of Object.entries(fields)) {
                const element = form.querySelector(selector);
                if (!element) {
                    throw new Error(`Champ ${key} non trouvé`);
                }
                formData.append(key, element.value);
            }

            // Construire l'URL de l'API
            const url = `{{ path('api_user_edit', {'id': '__USER_ID__'}) }}`.replace('__USER_ID__', userId);

            console.log('Envoi de la requête à URL:', url);
            console.log('Données du formulaire:', Object.fromEntries(formData.entries()));
            
            // Envoyer la requête
            const response = await fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                },
                // S'assurer que les cookies sont envoyés avec la requête
                credentials: 'same-origin'
            });

            // Vérifier d'abord le type de contenu
            const contentType = response.headers.get('content-type');
            console.log('Type de contenu de la réponse:', contentType);
            
            // Récupérer la réponse
            let data;
            if (contentType && contentType.includes('application/json')) {
                try {
                    data = await response.json();
                    console.log('Réponse JSON reçue:', data);
                } catch (jsonError) {
                    console.error('Erreur lors du parsing JSON:', jsonError);
                    throw new Error(`Erreur lors du parsing de la réponse JSON: ${jsonError.message}`);
                }
            } else {
                // Si ce n'est pas du JSON, récupérer le texte
                const text = await response.text();
                console.error('Réponse non-JSON reçue:', {
                    status: response.status,
                    statusText: response.statusText,
                    contentType: contentType,
                    body: text,
                    url: url
                });
                throw new Error(`Réponse invalide du serveur (Status: ${response.status}, Content-Type: ${contentType || 'non défini'})`);
            }

            // Vérifier si la réponse est OK
            if (!response.ok) {
                throw new Error(data.message || `Erreur HTTP: ${response.status} ${response.statusText}`);
            }

            if (!data.success) {
                throw new Error(data.message || 'Erreur lors de la modification');
            }

            // Redirection simple vers la page des utilisateurs
            window.location.href = "{{ path('admin_users') }}";



            // Réinitialiser le mot de passe
            const passwordInput = form.querySelector('input[name="password"]');
            if (passwordInput) {
                passwordInput.value = '';
            }

        } catch (error) {
            console.error('Erreur lors de la modification:', error);
            
            // Afficher l'erreur dans le formulaire
            const form = document.getElementById(`editUserForm${userId}`);
            if (form) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger';
                errorDiv.textContent = error.message;
                form.insertBefore(errorDiv, form.firstChild);
            }
            
            // Afficher également l'erreur en haut de la page
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show alert-ajax';
            alertDiv.innerHTML = `
                Erreur: ${error.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            const container = document.querySelector('.container-fluid');
            const card = document.querySelector('.card');
            if (container && card) {
                container.insertBefore(alertDiv, card);
                setTimeout(() => alertDiv.remove(), 5000);
            }
        } finally {
            // Réactiver le bouton de soumission
            const form = document.getElementById(`editUserForm${userId}`);
            if (form) {
                const submitButton = form.querySelector('button.btn-primary');
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'Enregistrer les modifications';
                }
            }
        }
    }
    </script>
{% endblock %}

{% block content %}
    <div class="container-fluid">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'error' ? 'danger' : label }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h3 class="card-title">Liste des utilisateurs</h3>
                    <div>
                        <button id="showStatsBtn" class="btn btn-outline-primary btn-sm me-2 rounded-pill">
                            <i class="bi bi-bar-chart-fill me-1"></i>Stats
                        </button>
                        <button class="btn btn-primary btn-sm rounded-pill" data-bs-toggle="modal" data-bs-target="#addUserModal">
                            <i class="bi bi-person-plus me-1"></i>Ajouter
                        </button>
                        <!-- Bouton pour générer un PDF de tous les utilisateurs -->
                        <a href="{{ path('admin_users_pdf') }}" class="btn btn-outline-danger ms-2" target="_blank">
                            <i class="bi bi-file-pdf me-1"></i>PDF
                        </a>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par nom ou prénom..." aria-label="Rechercher">
                            <select id="sortSelect" class="form-select" style="max-width: 150px;">
                                <option value="none" selected>Trier par date</option>
                                <option value="oldest">Plus ancien</option>
                                <option value="newest">Plus récent</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Section des statistiques par type d'utilisateur (masquée par défaut) -->
            <div id="statsSection" class="card-body border-bottom" style="display: none;">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="mb-3">Statistiques par type d'utilisateur</h5>
                        <div class="chart-container" style="position: relative; height:250px;">
                            <canvas id="userTypeChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mt-4">
                            <div class="stats-box p-3 rounded mb-2 bg-light">
                                <h6 class="mb-2">Répartition des utilisateurs</h6>
                                <div id="userTypeStats" class="mt-3">
                                    <!-- Les statistiques seront insérées ici par JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                
                                <th>Nom</th>
                                <th>Prénom</th>
                                <th>Email</th>
                                <th>Téléphone</th>
                                <th>Type</th>
                                <th>Date d'inscription</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for user in users %}
                            <tr data-user-id="{{ user.id }}" data-date-inscription="{{ user.dateInscription|date('U') }}">
                                
                                <td>{{ user.nom }}</td>
                                <td>{{ user.prenom }}</td>
                                <td>{{ user.email }}</td>
                                <td>{{ user.telephone }}</td>
                                <td>{{ user.typeUtilisateur }}</td>
                                <td>{{ user.dateInscription|date('d/m/Y H:i') }}</td>
                                <td class="user-actions">
                                    <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editUserModal{{ user.id }}" title="Modifier">
                                        <i class="bi bi-pencil"></i>
                                    </button>

                                    <!-- Modal d'édition pour l'utilisateur {{ user.id }} -->
                                    <div class="modal fade" id="editUserModal{{ user.id }}" tabindex="-1" aria-labelledby="editUserModalLabel{{ user.id }}" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="editUserModalLabel{{ user.id }}">Modifier l'utilisateur</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form id="editUserForm{{ user.id }}">
                                                        <input type="hidden" name="_token" value="{{ csrf_token('edit' ~ user.id) }}">
                                                        <div class="mb-3">
                                                            <label for="nom{{ user.id }}" class="form-label">Nom</label>
                                                            <input type="text" class="form-control" id="nom{{ user.id }}" name="nom" value="{{ user.nom }}" required>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="prenom{{ user.id }}" class="form-label">Prénom</label>
                                                            <input type="text" class="form-control" id="prenom{{ user.id }}" name="prenom" value="{{ user.prenom }}" required>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="email{{ user.id }}" class="form-label">Email</label>
                                                            <input type="email" class="form-control" id="email{{ user.id }}" name="email" value="{{ user.email }}" required>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="password{{ user.id }}" class="form-label">Mot de passe</label>
                                                            <input type="password" class="form-control" id="password{{ user.id }}" name="password" placeholder="Laissez vide pour ne pas modifier">
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="type_utilisateur{{ user.id }}" class="form-label">Type d'utilisateur</label>
                                                            <select class="form-select" id="type_utilisateur{{ user.id }}" name="type_utilisateur" required>
                                                                <option value="admin" {{ user.typeUtilisateur == 'admin' or user.typeUtilisateur == 'ROLE_ADMIN' ? 'selected' : '' }}>Administrateur</option>
                                                                <option value="freelance" {{ user.typeUtilisateur == 'freelance' ? 'selected' : '' }}>Freelance</option>
                                                                <option value="formateur" {{ user.typeUtilisateur == 'formateur' ? 'selected' : '' }}>Formateur</option>
                                                                <option value="employeur" {{ user.typeUtilisateur == 'employeur' ? 'selected' : '' }}>Employeur</option>
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="telephone{{ user.id }}" class="form-label">Téléphone</label>
                                                            <input type="tel" class="form-control" id="telephone{{ user.id }}" name="telephone" value="{{ user.telephone }}" pattern="[0-9]{8}" title="Le numéro de téléphone doit contenir 8 chiffres" required>
                                                            <small class="form-text text-muted">Format: 8 chiffres sans espaces (ex: 12345678)</small>
                                                        </div>

                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                                            <button type="button" class="btn btn-primary" onclick="updateUser(event, {{ user.id }})">Enregistrer les modifications</button>
                                                        </div>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="btn btn-danger btn-sm delete-user" data-bs-toggle="modal" data-bs-target="#deleteUserModal{{ user.id }}">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <!-- Bouton pour générer un PDF pour cet utilisateur -->
                                    <a href="{{ path('admin_user_pdf', {'id': user.id}) }}" class="btn btn-outline-danger ms-2" target="_blank">
                                        <i class="bi bi-file-pdf"></i>
                                    </a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">Ajouter un utilisateur</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="{{ path('admin_user_new') }}" method="POST" id="addUserForm">
                        <input type="hidden" name="_token" value="{{ csrf_token('new') }}">
                        <div class="mb-3">
                            <label for="nom" class="form-label">Nom</label>
                            <input type="text" class="form-control" id="nom" name="nom" required>
                        </div>
                        <div class="mb-3">
                            <label for="prenom" class="form-label">Prénom</label>
                            <input type="text" class="form-control" id="prenom" name="prenom" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Mot de passe</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <div class="mb-3">
                            <label for="type_utilisateur" class="form-label">Type d'utilisateur</label>
                            <select class="form-select" id="type_utilisateur" name="type_utilisateur" required>
                                <option value="">Choisir un type</option>
                                <option value="admin">Administrateur</option>
                                <option value="freelance">Freelance</option>
                                <option value="formateur">Formateur</option>
                                <option value="employeur">Employeur</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="telephone" class="form-label">Téléphone</label>
                            <input type="tel" class="form-control" id="telephone" name="telephone" pattern="[0-9]{8}" title="Le numéro de téléphone doit contenir 8 chiffres">
                            <small class="form-text text-muted">Format: 8 chiffres sans espaces (ex: 12345678)</small>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                            <button type="submit" class="btn btn-primary">Ajouter</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Afficher les messages flash dans la modal si nécessaire
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    var alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-{{ label }}';
                    alertDiv.textContent = '{{ message }}';
                    document.querySelector('.modal-body').insertBefore(alertDiv, document.querySelector('.modal-body').firstChild);
                {% endfor %}
            {% endfor %}

            // Réinitialiser le formulaire quand la modal est fermée
            var addUserModal = document.getElementById('addUserModal');
            addUserModal.addEventListener('hidden.bs.modal', function () {
                var form = addUserModal.querySelector('form');
                if (form) {
                    form.reset();
                }
                // Supprimer les messages d'alerte
                var alerts = addUserModal.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    alert.remove();
                });
            });
        });
    </script>

    <!-- Delete User Modals -->
    {% for user in users %}
    <div class="modal fade" id="deleteUserModal{{ user.id }}" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer l'utilisateur <strong>{{ user.nom }} {{ user.prenom }}</strong> ?</p>
                    <p class="text-danger"><small>Cette action est irréversible.</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <form action="{{ path('admin_user_delete', {'id': user.id}) }}" method="POST" style="display: inline;">
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ user.id) }}">
                        <button type="submit" class="btn btn-danger">Supprimer</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    {% endfor %}

    <!-- Modal des conditions d'utilisation -->
    <div class="modal fade" id="conditionsModal" tabindex="-1" aria-labelledby="conditionsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="conditionsModalLabel">Conditions d'utilisation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h4>Conditions Générales d'Utilisation</h4>
                    <p>Dernière mise à jour : {{ "now"|date("d/m/Y") }}</p>
                    
                    <h5>1. Acceptation des conditions</h5>
                    <p>En utilisant cette plateforme, vous acceptez de vous conformer aux présentes Conditions Générales d'Utilisation. Si vous n'acceptez pas ces conditions, veuillez ne pas utiliser cette plateforme.</p>
                    
                    <h5>2. Description du service</h5>
                    <p>Notre plateforme propose des services de mise en relation entre freelances, formateurs, employeurs et administrateurs dans le cadre de projets professionnels.</p>
                    
                    <h5>3. Inscription et comptes utilisateurs</h5>
                    <p>Pour utiliser certaines fonctionnalités de notre plateforme, vous devez créer un compte. Vous êtes responsable de maintenir la confidentialité de vos identifiants et de toutes les activités qui se produisent sous votre compte.</p>
                    
                    <h5>4. Données personnelles</h5>
                    <p>Nous recueillons et traitons vos données personnelles conformément à notre politique de confidentialité. En utilisant notre plateforme, vous consentez à cette collecte et à ce traitement.</p>
                    
                    <h5>5. Propriété intellectuelle</h5>
                    <p>Tous les contenus présents sur cette plateforme sont protégés par des droits de propriété intellectuelle. Toute reproduction non autorisée est interdite.</p>
                    
                    <h5>6. Limitation de responsabilité</h5>
                    <p>Nous ne pouvons garantir que notre plateforme sera exempte d'erreurs ou d'interruptions. Nous ne sommes pas responsables des dommages indirects résultant de l'utilisation de notre plateforme.</p>
                    
                    <h5>7. Modification des conditions</h5>
                    <p>Nous nous réservons le droit de modifier ces conditions à tout moment. Les modifications prennent effet dès leur publication sur la plateforme.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">J'ai compris</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
